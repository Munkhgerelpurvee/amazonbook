const errorHandler = (err, req, res, next) => {
    console.log(err.stack.yellow.underline);

    res.status(err.statusCode || 500).json({
        success:false,
        error:err.message,
    });



};

module.exports = errorHandler

// Үүнийг одоо апп руугаа imort хийж оруулж өгнө.


/*
lesson31- Ямар ч хэлэнд try{} catch(err) { } --- гэдэг Exception Handling System байдаг.

try {} catch (err) {} Exception Handling System гэж юу вэ?
try...catch блок нь JavaScript болон бусад програмчлалын хэлнүүдэд ашиглагддаг алдаа барих (error handling) механизм юм. Энэ нь код ажиллах үед гарч болох алдааг (exception) илрүүлж, програм зогсохоос сэргийлэх зориулалттай.

Exception --үүсэх юм бол тухайн хэлний тусгай Exception эсвэл error нэртэй class-ийн обьект нь үүсээд тэр обьект нь тухайн систем буюу application даяараа цацагддаг байгаа. Тэгэнгүүт нь тэр цацсан алдааг нь catch - хэсэг нь барьж аваад ийм алдаа үүслээ message нь ийм байна. Код нь ийм байна гэж хэлдэг. 

Энэ Exception --ний цацах болон барих систем бол ямар ч програмчлалын хэлэнд маш их хэрэглэгддэг module хооронд , систем хооронд мэдээлэл дамжуулах гол хэрэгсэл болдог байгаа.
Жнь: Магадгүй манай апп нв --- MySQL өгөгдлийн сантай ажиллаж байдаг бол өгөгдлийн сангаас маань бидэнд query дамжуулсан чинь энэ  query чинь алдаатай байна гэдэг юм үүсэх юм бол MySQL-тэй холбогддог driver руу нь MySQL-DB---ээс алдаа дамжигдаж ирээд түүнийг нь болохоор driver нь ийм алдаа үүссэн байна гэдэг  Exception -- шинээр үүсгээд тэр  Exception --ээ цацаад түүнийг нь манай код try-catch-аар барьж аваад тэгээд бид catch - дээрээ барьж аваад  Exception --ийг нь харахад бидний явуулсан query  маань буруу гэж MySQL--ээс хэлсэн байна гэж мэднэ. Гэх мэтчилэн өөр програмчлалын системүүд хоорондоо хүртэл алдааныхаа мэдээллээ дамжуулахад энэ Exception Handling System-ийг ашигладаг.

Exception --ямар файлуудыг дамжаад бие биеэндээ шидэгдээд явсан бэ гэдгийг илтгэх дараалал нь хүртэл байдаг.Үүнийг developers нь: stack trace  гэж ярьдаг.
Өнгөрсөн хичээлээр бид алдааг сонгож барьж аваад ---console.log(err.stack.yellow.underline);---
 stack trace -ийг нь yellow.underline өнгөөр console -руугаа хэвлэж харж байсан.


Алдааны stack trace гэж юу вэ?
Stack trace нь алдаа (error) гарсан үед JavaScript програм ямар функцүүдийг дамжиж, хаана алдаа үүссэн талаар мэдээлэл өгдөг. Энэ нь алдааны эх үүсвэрийг олоход тусалдаг debugging хэрэгсэл юм.


Өнөөдрийн хичээлээр JavaScript-ийн өөрийнх нь Exception error обьектийг нь өргөтгөөд өөрийн гэсэн error-ийг үүсгэж ашиглах гэж байгаа. 

Бид Custom error - оо нэг газар хадгална. utils(tools гэсэн утгатай) -- гэдэг фолдер үүсгээд  туслах зүйлсээ энд хадгална гэж үзье. Дотор нь myError.js файл нээж ажиллая.

exports.updateCategory = async (req, res, next) => {

    try{

        const upCategory = await CategoryModel.findByIdAndUpdate(req.params.id, req.body, {
            new:true,
            runValidators:true
        });

        if(!upCategory) {
            throw new MyError(req.params.id + "id-тай категори АЛГА байгаад өөрчилж чадаагүй ШҮҮ!!!.", 400)
        
        };
        res.status(200).json({
            success:true,
            data:upCategory
        })

    } catch(err) {
       next(err);
    }
}; ийм болсон нь кодны бичиглэл багасаж байгаа гэсэн утгаар нь харах биш харин хэзээ нэгэн цагт алдаа үүсэхэд :
cause:"тийм шалтгаантай байна " гэх мэт нэмэлт олон мэдээлэл дамжуулдаг болж систем маань өргөжих болох юм бол шууд error.middleware.js дээр ганц удаа засаад өгчихөд хангалттай юм буюу манай myError.js---нд л лав засвар орохгүй тул олон газар засахгүй болох юм.

myError.js---нь алдаа үүслээ гэдгийг нь хэлж байгаа болохоос алдаа нь ингэж дамжигдах ёстой гэдгийг controller шийдэх ёсгүй юм.


*/